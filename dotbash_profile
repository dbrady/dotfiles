#!/bin/sh
export EDITOR=$(echo `which emacs` -nw -q -l ~/.emacstiny)
export GEMEDITOR=$(echo `which emacs` -nw)
export CVSEDITOR=$(echo `which emacs` -nw -q -l ~/.emacstiny)
export SVN_EDITOR=$(echo `which emacs` -nw -q -l ~/.emacstiny)

case `uname -a | awk '{print $1}'` in
    Linux)
	# export JAVA_HOME='/usr/lib/jvm/default-java'
	export JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64/'
        ;;
    Darwin)
        export JAVA_HOME='/System/Library/Frameworks/JavaVM.framework/Home'
        ;;
    *)
        echo '~/.bash_profile has no clue what OS this is; not setting JAVA_HOME.'
        ;;
esac

# === OSX Specific ======================================================
# Search the ls manpage for "CLICOLOR" and "color designators for an
# explanation of this goodness.

# CLICOLOR: Search "man ls" for "CLICOLOR" and "color designators".
# a: black                                        1.  directory
# b: red                                          2.  symbolic link
# c: green                                        3.  socket
# d: brown                                        4.  pipe
# e: blue                                         5.  executable
# f: magenta                                      6.  block special
# g: cyan                                         7.  character special
# h: light grey                                   8.  executable with setuid bit set
# A: bold black, usually shows up as dark grey    9.  executable with setgid bit set
# B: bold red                                     10. directory writable to others, with sticky bit
# C: bold green                                   11. directory writable to others, without sticky bit
# D: bold brown, usually shows up as yellow
# E: bold blue
# F: bold magenta
# G: bold cyan
# H: bold light grey; looks like bright white
# x: default foreground or background
#
# The standard Mac OSX colors are: exfxcxdxbxegedabagacad
#
# TODO: export these to functions or scripts called light_bg or dark_bg, etc.
export CLICOLOR=1
# Standard colors look good on a white background
# export LSCOLORS=exfxcxdxbxegedabagacad
# export LS_COLORS=exfxcxdxbxegedabagacad

# Swap blue/cyan for better visibility on dark bg
#export LSCOLORS=gxfxcxdxbxegedabagacad
# === OSX Specific ======================================================

# Use less by default b/c search works better. But keep most inifile
# here for tweaking.
#export PAGER="most"
export MOST_INIFILE='/etc/most.rc'

GREP_OPTIONS='--color=auto'
GREP_COLOR='1;32'

# ----------------------------------------------------------------------
# Terminal colours (after installing GNU coreutils)
NM="\[\033[0;38m\]" #means no background and white lines
HI="\[\033[0;37m\]" #change this for letter colors
HII="\[\033[0;31m\]" #change this for letter colors
SI="\[\033[0;33m\]" #this is for the current directory
IN="\[\033[0m\]"

export HISTFILESIZE=10000

if [[ $PATH != *"private_bin"* ]]; then
    export PATH=~/private_bin:$PATH
fi

# CMM-specific stuffs - if more than this path needs to be here, please make a
# .cmm file and source_files() it
if [[ $PATH != *"cmm/bin"* ]]; then
    export PATH=~/cmm/private_bin:~/cmm/bin:$PATH
fi

if [[ $PATH != *"$HOME/bin"* ]]; then
    export PATH=$HOME/bin:$PATH
fi

source_files()
{
  local file

  for file in "$@" ; do

    file=${file/\~\//$HOME\/} # Expand ~/

    if [[ -s "${file}" ]] ; then
      source "${file}"
    # else
    #     # I found this useful for debugging, now it's just noisy
    #   if [[ ! -e "${file}" ]] ; then
    #     printf "NOTICE: ${file} does not exist, not loading.\n"
    #   else
    #     true # simply an empty file, no warning necessary.
    #   fi
    fi
  done

  return 0
}

# Example usage:
source_files ~/.aliases \
  ~/.bash_completions \
  ~/.git-completion.bash \
  ~/.nav \
  ~/.private \
  ~/bin/ps1_functions \
  ~/.bash_functions \
  ~/.current-project \
  ~/.hue.conf

# this must come after git-completion.bash has been sourced
# turn on path completion for go
#
# There's a way to trap error exit status and change your prompt based on that;
# since my CMM prompt is a pill (U+1F48A, ðŸ’Š ), a good emoji for that might be
# the syringe (U+1F489, ðŸ’‰ )
complete -o default -o nospace -F _git_checkout go

if command -v ps1_set >/dev/null 2>&1 ; then
    if [ `hostname` == "poo.local" ]; then
        ps1_set --prompt "ðŸ’© "
        export PS2=ðŸ’©ðŸ’©
    elif [ `hostname` == "poot" ]; then
#        ps1_set --prompt "ðŸ’¨Â­"
        ps1_set --prompt "ðŸ’¨ "
        export PS2="ðŸ’¨ðŸ’¨ "
        # ps1_set --prompt "$"
    else
        ps1_set --prompt "ðŸ’ŠÂ­"
        export PS2=ðŸ’ŠðŸ’ŠÂ­
    fi
else
    export PS1="!!! It's \D{%H} O'Clock! Time to install rvm to fix your prompt!\n$ "
fi

export MANPATH=/opt/local/share/man:$MANPATH

# For some reason unbeknownst to me, emacs started from the CLI opens an XWindows version of emacs but with keyboard input still locked to the terminal.
# 2015-02-04 Is this dead code? Has no effect in OSX. Turn back on if linux still needs it.
# alias 'emacs'='emacs -nw'

export OPSCODE_USER=ratgeyser

export PATH="$HOME/.rvm/bin:$PATH" # Add RVM to PATH for scripting

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Is this my work machine?
if [ `hostname` = "CMMC02V81NYG8WL" ]; then
    rvm default 2.2.2
else
    case `uname -a | awk '{print $1}'` in
        Linux)
            source /etc/profile.d/rvm.sh
            ;;
        Darwin)
            echo "~/.bash_profile: I see you're on OSX but NOT your usual work machine. That's weird, right? NOT setting rvm defaults."
            ;;
        *)
            echo '~/.bash_profile has no clue what OS this is; not setting rvm defaults.'
            ;;
    esac
fi

# Setup ssh agent
# ssh-add -L &> /dev/null
ssh-add -L >/dev/null 2>&1
if [ $? -eq 1 ]; then
    ssh-add
fi

# OSX-specific randomness
if [ `uname -s` == "OSX" ]; then
    test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

    [ -f ~/.fzf.bash ] && source ~/.fzf.bash

    . $HOME/.asdf/asdf.sh
    . $HOME/.asdf/completions/asdf.bash

    # capybara-webkit needs quicktime 5.5, which is the last version of QT to support webkit bindings
    # get it with brew install qt@5.5
    export PATH="/usr/local/opt/qt@5.5/bin:$PATH"

    # for mtr (OSX)
    export PATH=$PATH:/usr/local/sbin
fi

# Linux-specific randomness
if [ `uname -s` == "Linux" ]; then
    export FLEX_HOME=/home/dbrady/devel/flex_sdk_4_6/
    export PATH=$PATH:$FLEX_HOME/bin
fi
