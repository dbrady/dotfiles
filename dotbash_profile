#!/bin/sh
export EDITOR=$(echo `which emacs` -nw -q -l ~/.emacstiny)
export GEMEDITOR=$(echo `which emacs` -nw)
export CVSEDITOR=$(echo `which emacs` -nw -q -l ~/.emacstiny)
export SVN_EDITOR=$(echo `which emacs` -nw -q -l ~/.emacstiny)

# Flags suggested by homebrew
export LDFLAGS="-L/opt/homebrew/opt/curl/lib -L/opt/homebrew/opt/libpq/lib"
export CPPFLAGS="-I/opt/homebrew/opt/curl/include -I/opt/homebrew/opt/libpq/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/curl/lib/pkgconfig"


case `uname -a | awk '{print $1}'` in
    Linux)
        # export JAVA_HOME='/usr/lib/jvm/default-java'
        export JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64/'
        ;;
    Darwin)
        export JAVA_HOME='/System/Library/Frameworks/JavaVM.framework/Home'
        ;;
    *)
        echo '~/.bash_profile has no clue what OS this is; not setting JAVA_HOME.'
        ;;
esac

# === OSX Specific ======================================================
# Search the ls manpage for "CLICOLOR" and "color designators for an
# explanation of this goodness.

# CLICOLOR: Search "man ls" for "CLICOLOR" and "color designators".
# a: black                                        1.  directory
# b: red                                          2.  symbolic link
# c: green                                        3.  socket
# d: brown                                        4.  pipe
# e: blue                                         5.  executable
# f: magenta                                      6.  block special
# g: cyan                                         7.  character special
# h: light grey                                   8.  executable with setuid bit set
# A: bold black, usually shows up as dark grey    9.  executable with setgid bit set
# B: bold red                                     10. directory writable to others, with sticky bit
# C: bold green                                   11. directory writable to others, without sticky bit
# D: bold brown, usually shows up as yellow
# E: bold blue
# F: bold magenta
# G: bold cyan
# H: bold light grey; looks like bright white
# x: default foreground or background
#
# The standard Mac OSX colors are: exfxcxdxbxegedabagacad
#
# TODO: export these to functions or scripts called light_bg or dark_bg, etc.
export CLICOLOR=1
# Standard colors look good on a white background
# export LSCOLORS=exfxcxdxbxegedabagacad
# export LS_COLORS=exfxcxdxbxegedabagacad

# Swap blue/cyan for better visibility on dark bg
#export LSCOLORS=gxfxcxdxbxegedabagacad
# === OSX Specific ======================================================

# Use less by default b/c search works better. But keep most inifile
# here for tweaking.
#export PAGER="most"
export MOST_INIFILE='/etc/most.rc'

GREP_OPTIONS='--color=auto'
GREP_COLOR='1;32'

# ----------------------------------------------------------------------
# Terminal colours (after installing GNU coreutils)
NM="\[\033[0;38m\]" #means no background and white lines
HI="\[\033[0;37m\]" #change this for letter colors
HII="\[\033[0;31m\]" #change this for letter colors
SI="\[\033[0;33m\]" #this is for the current directory
IN="\[\033[0m\]"

export HISTFILESIZE=10000

# Whin SHIFTING dirs onto head of PATH, last shift is the first/winner.
# postgres Acima (postgresql@13 because I wanted a psql for reference)
if [[ $PATH != *"/opt/homebrew/bin"* ]]; then
    export PATH=/opt/homebrew/Cellar/postgresql\@13/13.11/bin:$PATH
fi

if [[ $PATH != *"$HOME/bin"* ]]; then
    export PATH=$HOME/bin:$PATH
fi

if [[ $PATH != *"private_bin"* ]]; then
    export PATH=~/private_bin:$PATH
fi

# Acima-specific stuffs - if more than this path needs to be here, please make a
# .acima file and source_files() it
if [[ $PATH != *"acima/bin"* ]]; then
    export PATH=~/acima/bin:$PATH
fi

source_files()
{
  local file

  for file in "$@" ; do

    file=${file/\~\//$HOME\/} # Expand ~/

    if [[ -s "${file}" ]] ; then
      source "${file}"
    # else
    #     # I found this useful for debugging, now it's just noisy
    #   if [[ ! -e "${file}" ]] ; then
    #     printf "NOTICE: ${file} does not exist, not loading.\n"
    #   else
    #     true # simply an empty file, no warning necessary.
    #   fi
    fi
  done

  return 0
}

source_files ~/.aliases \
  ~/.bash_completions \
  ~/.git-completion.bash \
  ~/.nav \
  ~/.private \
  ~/.ps1_functions \
  ~/.bash_functions \
  ~/.current-project \
  ~/.hue.conf \
  ~/.platform-dev \
  ~/.vpn

# Turn on path completion for my go command.
# This must come after git-completion.bash.
complete -o default -o nospace -F _git_checkout go

# PS1 EMOJIS
if command -v ps1_set >/dev/null 2>&1 ; then
    if [ `hostname` == "poo.local" ]; then
        ps1_set --prompt "ðŸ’© "
        export PS2=ðŸ’©ðŸ’©
    elif [ `hostname` == "poot" ]; then
#        ps1_set --prompt "ðŸ’¨Â­"
        ps1_set --prompt "ðŸ’¨ "
        export PS2="ðŸ’¨ðŸ’¨ "
        # ps1_set --prompt "$"
    elif [ `hostname` == "CMMVMOSX045" ]; then
        ps1_set --prompt "ðŸ’ŠÂ­"
        export PS2=ðŸ’ŠðŸ’ŠÂ­
    elif [ `hostname` == "Mac1205Pro.local" ]; then
        # ps1_set --prompt "ðŸ’³"
        # export PS2=ðŸ’³ðŸ’³
        ps1_set --prompt "$"
        export PS2=">"
    elif [ `hostname` == "31b95b7de045" ]; then
        ps1_set --prompt "ðŸš¢"
        export PS2=ðŸš¢ðŸš¢
    else
        ps1_set --prompt "ðŸŽ¸"
        export PS2=ðŸŽ¶ðŸŽµ
    fi
else
    export PS1="!!! It's \D{%H} O'Clock! Check your dotfiles folder for ps1_functions.\n$ "
fi


# force 256-color terminal in docker
if [ "$IS_DOCKER_LOCAL" == "1" ]; then
    export TERM=xterm-256color
fi

export MANPATH=/opt/local/share/man:$MANPATH

# For some reason unbeknownst to me, emacs started from the CLI opens an XWindows version of emacs but with keyboard input still locked to the terminal.
# 2015-02-04 Is this dead code? Has no effect in OSX. Turn back on if linux still needs it.
# alias 'emacs'='emacs -nw'

export OPSCODE_USER=ratgeyser

# 2023-07-31 - Switching to rbenv because the keyserver poisoning is real :'-(
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Acima
if [ `hostname` = "Mac1205Pro.local" ]; then
    # MP tests need this every time, so
    export TZ='America/Denver'

    # This adds 80 seconds to the MP spec suite. It is good to pass in when we
    # need the whole suite to interop correctly, but when trying to TDD it is
    # agonizing.
    # export SPEC_SEED=true

    # Acima AWS
    export AWS_PROFILE=AcimaNonprod-NonProdDeveloperAccess
    # export KUBECONFIG=~/.kube/nonprod/preflight
    export KUBECONFIG=~/.kube/config

    # Atlas>Artemis>Hermes gave the option to install postgresql@13 as an app,
    # and self-containment is teh win. But now I need the CLI tools in my path,
    # so...
    export PATH="$PATH:/Applications/Postgres.app/Contents/Versions/13/bin"
else
    case `uname -s` in
        Linux)
            source /etc/profile.d/rvm.sh
            ;;
        Darwin)
            echo "~/.bash_profile: I see you're on OSX but NOT your usual work machine. That's weird, right? NOT setting rvm defaults."
            ;;
        *)
            echo "~/.bash_profile has no clue what OS this is. So that's kinda neat I guess."
            ;;
    esac
fi

if [ `uname -s` = "Darwin" ]; then
    # I'll never let go of bash until they physically bar me from installing it.
    # zsh is NOT an acceptable bash unless you're not using any of bash's features.
    # That said, I get why AAPL is doing this. bash going GPL v3 poses a genuine
    # threat to the privacy of their OS.
    export BASH_SILENCE_DEPRECATION_WARNING=1
fi


# Setup ssh agent
# ssh-add -L &> /dev/null
ssh-add -L >/dev/null 2>&1
if [ $? -eq 1 ]; then
    ssh-add
fi

# OSX-specific randomness
if [ `uname -s` == "Darwin" ]; then
    test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

    [ -f ~/.fzf.bash ] && source ~/.fzf.bash

    # capybara-webkit needs quicktime 5.5, which is the last version of QT to support webkit bindings
    # get it with brew install qt@5.5
    # 2023-10-16 - Homebrew is in a different place on this macheen now
    # export PATH="/usr/local/opt/qt@5.5/bin:$PATH"

    # for mtr (OSX)
    export PATH=$PATH:/usr/local/sbin
fi

# Linux-specific randomness
if [ `uname -s` == "Linux" ]; then
    export FLEX_HOME=/home/dbrady/devel/flex_sdk_4_6/
    export PATH=$PATH:$FLEX_HOME/bin
fi

# my manual implementation of ponysay because lol
# sayfortune
# if [ -e ~/bin/applejack.txt ] ; then
#     cat ~/bin/applejack.txt
# fi

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# $IS_DOCKER_LOCAL is a flag we set in data_services to distinguish between "prodlike, because Docker" and "prodlike, because production"
if [ ! "$IS_DOCKER_LOCAL" == "1" ]; then
    # Let's do birbs for a while. (Acima OSX only, since I don't have my Pictures
    # folder under git since I don't wanna get my repo copywronged.)  Have to call
    # it "term-birb" because "birb" will "bundle exec irb" lol.
    term-birb

    # brew shellenv will dump all the homebrew variables. eval() on it will
    # export them into the current bash session.
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# rbenv
# eval "$(rbenv init - bash)"
rbenv global 3.2.2
export PATH="/Users/davidbrady/.rbenv/shims/:$PATH"

# LOL THIS IS FOR MP ON M1
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
