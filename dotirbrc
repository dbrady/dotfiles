#!/usr/bin/env ruby
# String methods is a global variable, and captured before anybody
# else has had the chance to monkeypatch anything. Look at the
# $MONKEYPATCHES variable at the end of this file for how I use it.
$string_methods = "foo".methods

$: << File.expand_path(File.join("~", "/devel/lib"))
  
require "rubygems"
require 'pp'
require 'wirble'

require "utility_belt"

UtilityBelt.equip :all

require 'boson'
Boson.start
require 'hirb'
extend Hirb::Console

# Hirb Docco is here: http://tagaholic.me/hirb/doc/index.html
def disable_hirb; Hirb::View.disable; end
def enable_hirb; Hirb::View.enable; end

def global_vars
  global_variables.sort.map { |e| [e, (eval e).inspect]}
end

# These are Wirble's Default Colors
WIRBLE_DEFAULT_COLORS = {
  # delimiter colors
  :comma              => :blue,
  :refers             => :blue,

  # container colors (hash and array)
  :open_hash          => :green,
  :close_hash         => :green,
  :open_array         => :green,
  :close_array        => :green,

  # object colors
  :open_object        => :light_red,
  :object_class       => :white,
  :object_addr_prefix => :blue,
  :object_line_prefix => :blue,
  :close_object       => :light_red,

  # symbol colors
  :symbol             => :yellow,
  :symbol_prefix      => :yellow,

  # string colors
  :open_string        => :red,
  :string             => :cyan,
  :close_string       => :red,

  # misc colors
  :number             => :cyan,
  :keyword            => :green,
  :class              => :light_green,
  :range              => :red,
}

# this does not actually work. Research later.
Wirble.init(:colors => { :symbol => :blue, :symbol_prefix => :blue }, :init_color => true)

if ENV["RAILS_ENV"]
  require 'dave_rails_hacks'
  $: << File.expand_path(File.join("~", "/ruby/scrapbin/rails"))
  require 'ar_ext'
end

# ----------------------------------------------------------------------
# Object#local_methods
class Object
  def local_methods
    (methods - Object.instance_methods).sort
  end
end

# ----------------------------------------------------------------------
# Log to STDOUT if in Rails
if ENV.include?('RAILS_ENV') && !Object.const_defined?('RAILS_DEFAULT_LOGGER')
  require 'logger'
  RAILS_DEFAULT_LOGGER = Logger.new(STDOUT)
end

# ----------------------------------------------------------------------
# Metric Conversions
module MetricSystemForDummies
  def c_to_f
    32.0 + (self * 9.0) / 5.0
  end

  def f_to_c
    (self - 32.0) * 5.0 / 9.0
  end

  def lb_to_kg
    self / 2.2
  end

  def kg_to_lb
    self * 2.2
  end

  def cm_to_in
    self / 2.54
  end

  def in_to_cm
    self * 2.54
  end
end

class Numeric
  include MetricSystemForDummies
end

# ----------------------------------------------------------------------
# Toggleable
# 
# Provides the morginally useful method "toggle_between". Sure, you
# could just jam in the ternary operator and be done with it. But is
# that really as elegant as "name.toggle_between "a", "b" ?
# 
# No. No, it isn't.
# 
# <b>Note:</b> If you want your custom class to include
# toggle_between!, you must include this module AFTER you have defined
# your replace method.
module Toggleable
  # If this object matches either argument, returns the other one.
  # 
  #  "Bob".toggle_between("Bob", "Robert")
  #  # => "Robert"
  def toggle_between(a, b)
    return b if self == a
    return a if self == b
    nil
  end


  # When toggleable is included in a class, it looks for a "replace"
  # method. If it finds it, we add another method, toggle_between! to
  # the class.
  # 
  #  name = "Bob"
  #  name.toggle_between! "Bob", "Robert"
  #  name
  #  # => "Robert"
  def Toggleable.included(mod)
    if mod.instance_methods.include? "replace"
      mod.send :define_method, :toggle_between!, lambda {|a, b| self.replace toggle_between(a, b) }
    end
  end
end

# in my .irbrc: add the non-destructive toggle_between to everything
class Object; include Toggleable; end

# these classes in Ruby Core all have replace methods. Jack 'em up
# with the sexier toggle_between! version.
[ Hash, String, Array ].each {|c| c.send :include, Toggleable }


# Save off extension methods. Now in irb I can do "puts foo.methods -
# $EXM" and not have to see all the methods that irb, wirble,
# utility_belt, and all the other superfriends have jammed into my
# object.
$MONKEYPATCHES = ("bar".methods - $string_methods).sort
