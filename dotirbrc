#!/usr/bin/env ruby
# String methods is a global variable, and captured before anybody
# else has had the chance to monkeypatch anything. Kernel.methods
# returns all globally defined methods, same deal. Later on, do a
# Kernel.methods-$kernel_methods to see what global methods have been
# added, and use "foo".methods - $string_methods to see what
# monkeypatches have been added.
$kernel_methods = Kernel.methods
$string_methods = "foo".methods

$: << File.expand_path("~/devel/lib")

require "rubygems"
require 'pp'

$got_hirb = false
begin
  require 'hirb'
  $got_hirb = true
  Hirb.enable
rescue LoadError => e
  $stderr.puts "~/.irbrc:#{__LINE__}: Could not initialize hirb: hirb gem not present in this gemset"
end

def global_vars
  global_variables.sort.map { |e| [e, (eval e).inspect]}
end

# These are Wirble's Default Colors
WIRBLE_DEFAULT_COLORS = {
  # delimiter colors
  :comma              => :blue,
  :refers             => :blue,

  # container colors (hash and array)
  :open_hash          => :green,
  :close_hash         => :green,
  :open_array         => :green,
  :close_array        => :green,

  # object colors
  :open_object        => :light_red,
  :object_class       => :white,
  :object_addr_prefix => :blue,
  :object_line_prefix => :blue,
  :close_object       => :light_red,

  # symbol colors
  :symbol             => :yellow,
  :symbol_prefix      => :yellow,

  # string colors
  :open_string        => :red,
  :string             => :cyan,
  :close_string       => :red,

  # misc colors
  :number             => :cyan,
  :keyword            => :green,
  :class              => :light_green,
  :range              => :red,
}

if $got_wirble
  Wirble.init
  Wirble.colorize
end

# ----------------------------------------------------------------------
# Object#local_methods
class Object
  def local_methods
    (methods - Object.instance_methods).sort
  end
end

# ----------------------------------------------------------------------
# Log to STDOUT if in Rails
if ENV.include?('RAILS_ENV') && !Object.const_defined?('RAILS_DEFAULT_LOGGER')
  require 'logger'
  RAILS_DEFAULT_LOGGER = Logger.new(STDOUT)
end

# ----------------------------------------------------------------------
# Metric Conversions
module MetricSystemForDummies
  def c_to_f
    32.0 + (self * 9.0) / 5.0
  end

  def f_to_c
    (self - 32.0) * 5.0 / 9.0
  end

  def lb_to_kg
    self / 2.2
  end

  def kg_to_lb
    self * 2.2
  end

  def cm_to_in
    self / 2.54
  end

  def in_to_cm
    self * 2.54
  end
end

class Numeric
  include MetricSystemForDummies
end

begin
  # looksee is awesome. Adds gorgeous Object#ls method
  # https://github.com/oggy/looksee
  require 'looksee'
rescue LoadError => e
  $stderr.puts "~/.irbrc:#{__LINE__}: Could not load looksee/shortcuts: looksee gem not present in this gemset"
end
