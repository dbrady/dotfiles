#!/usr/bin/env ruby

# begin
#   # looksee is awesome. Adds gorgeous Object#ls method
#   # https://github.com/oggy/looksee
#   require 'looksee'
# rescue LoadError => e
#   $stderr.puts "~/.irbrc:#{__LINE__}: Could not load looksee/shortcuts: looksee gem not present in this gemset"
# end

require File.expand_path("~/dotfiles/json_load_file")
require File.expand_path("~/dotfiles/xml_load_file")
require File.expand_path("~/dotfiles/just_your_methods")

# Hello Acima MP Rails
if defined? Rails

  # ZBONCAK_ID=41499
  # ZBONCAK_GUID="merc-5c5d37fb-071c-4739-b832-bfafc93db09b"
  # DAVE_USER_ID=2892
  # DAVE_API_USER_ID=377

  DAVE_USER_ID=4607
  DAVE_MERCHANT_ID=50_000
  DAVE_MERCHANT_GUID="merc-dd0c3664-e428-4531-8eff-d8e8e6fb7a08"
  DAVE_LOCATION_ID=66126
  DAVE_LOCATION_GUID="loca-9576f79c-881e-416a-9b0a-53335fac8680"
  DAVE_LOCATION2_ID=50_000
  DAVE_LOCATION2_GUID="loca-81c2d3e5-df37-4235-8b99-fd52e468ee76"

  puts 'def load_merchant; Merchant.find(DAVE_MERCHANT_ID); end # Find Zboncak-Adams easily'
  puts 'def load_user; User.find(DAVE_USER_ID); end # Find my user easily'
  puts 'def load_api_user; ApiUser.find(377); end'
  puts "def load_hacks -> load all files in app/local_hacks"

  def load_hacks
    # load all files in app/local_hacks
    Dir.glob(Rails.root + "app/local_hacks/*").each do |file|
      puts "Loading #{file}..."
      load file
    end
    puts "Loaded! Call ApiScript.ls to list important/useful methods"
  end

  # Call this and it will display the next line of source code
  def log_next_line!
    file, line, _ = caller.first.split(/:/)
    line = line.to_i
    source = File.readlines(file)[line]
    source.chomp
    puts source.cyan
  end

  def load_merchant
    log_next_line!
    Merchant.find DAVE_MERCHANT_ID
  end

  def load_location
    log_next_line!
    Location.find DAVE_LOCATION_ID
  end

  def load_user
    log_next_line!
    User.find DAVE_USER_ID
  end

  def load_api_user
    raise "DAVE_API_USER_ID needs to be updated"
    ApiUser.find DAVE_API_USER_ID
  end

  class User < ApplicationRecord
    def add_all_roles!
      puts "Giving all roles to #{full_name}..."
      user.role_names = "|#{Role.all.pluck(:short_name) * '|'}|"
      user.save
    end

    def remove_all_roles!
      puts "Removing all roles from #{full_name}..."
      user.role_names = ''
      user.save
    end
  end

  # Convenience Preload user / merchant / location
  begin
    user = load_user
    merchant = load_merchant
    location = load_location
  rescue StandardError => e
    puts "Could not load user, merchant, or location: #{e}"
  end

  def convert_lease_to_credit(contract, amount_approved=1500, available_amount=1500)
    CreditContract.create(amount_approved:, available_amount:)
    contract.update(consumer_product_type: "credit", amount_approved:, credit_contract_id: CreditContract.last.id)
  end
end


# Cadged from Ramses
def apply!(merchant_id = nil)
  access_token = ::Scripts::Api::Helpers::Auth0Token.generate_access_token(application: :aperture)
  api_user = ::Scripts::Api::Helpers::ApiUser.setup(handle: :api_test)
  headers = ::Scripts::Api::Helpers::Headers.setup(access_token: access_token, user: api_user)
  merchant = merchant_id ? ::Merchant.find(merchant_id) : ::Scripts::Api::Helpers::Merchant.default
  merchant = if merchant_id.present?
               ::Merchant.find(merchant_id)
             else
               ::Scripts::Api::Helpers::Merchant.default
             end
  location = merchant.locations.first

  body = generate_application_body(merchant, location)
  path = "/services/api/private/contracts"

  response = ::Scripts::Api::Helpers::Request.post(
    body:    body,
    headers: headers,
    path:    path,
  )
  body = JSON.parse(response.body)
  message = if body["response"].present?
              {
                status:       body["status"],
                code:         body["code"],
                message:      body["message"],
                lease_id:     body["response"]["id"],
                guid:         body["response"]["guid"],
                lease_number: body["response"]["lease_number"],
                merchant_id:  merchant.id,
                location_dba: location.dba,
              }
            else
              {
                status:  body["status"],
                code:    body["code"],
                message: body["message"],
              }
            end
  pp(message)
end

def generate_application_body(merchant, location)
  {
    contract: {
      mobile_apply_phone:                  "",
      card_application:                    false,
      trustev_session_id:                  "",
      manual_pay:                          nil,
      applicant:                           {
        first_name:                    ::Faker::Name.safe_first_name,
        middle_name:                   "",
        last_name:                     ::Faker::Name.safe_last_name,
        address_1:                     "384 LOGAN AVE",
        address_2:                     "",
        city:                          "SALT LAKE CITY",
        state:                         "UT",
        zip:                           "84115",
        verified_address:              false,
        email:                         "test#{::Faker::Number.digits(9)}@example.com",
        main_phone:                    ::Faker::PhoneNumber.clean_phone_number,
        main_phone_type:               "mobile",
        dob:                           "1935-08-20",
        id_document_number:            "991231231214",
        id_document_state_code:        "UT",
        id_document_type:              "drivers_license",
        id_document_expiry_date:       (DateTime.now + 5.years).strftime("%F"),
        ssn:                           ::Faker::Number.digits(9),
        bank_name:                     "First Utah Bank",
        routing_number:                ::Faker::Bank.routing_number,
        account_number:                ::Faker::Bank.account_number,
        income_source:                 "full_time_job",
        employment_net_monthly_income: "4000",
        income_net_per_paycheck:       "1846",
        income_payment_method:         "direct_deposit",
        last_payday_on:                DateTime.now.strftime("%F"),
        next_payday_on:                (DateTime.now + 1.month).strftime("%F"),
        pay_frequency:                 "monthly",
        income_schedule_recur_on:      "day_of_week",
        income_schedule_recurrence:    {
          start_time: {
            time: "2019-06-02T06:00:00.000Z",
            zone: "Mountain Time (US & Canada)",
          },
          rrules:     [
            {
              validations: {
                day: [
                  3,
                ],
              },
              rule_type:   "IceCube::WeeklyRule",
              interval:    2,
              week_start:  0,
            },
          ],
          rtimes:     [],
          extimes:    [],
        },
        income_details_attributes:     {
          transformed_weekly_pay: false,
        },
        application_source:            "merchant",
        referrer_url:                  "http:\/\/localhost:3000\/merchant\/contracts\/2185266",
        tongue_code:                   "en",
      },
      campaign_source:                     {
        utm_source:   "",
        utm_medium:   "",
        utm_campaign: "",
        utm_term:     "",
        utm_content:  "",
        gclid:        "",
      },
      consent_to_automated_communications: false,
      location_guid:                       location.guid,
      merchant_guid:                       merchant.guid,
    },
  }
end

# jp - like pp, but in JSON.
# - if it response to as_json, it calls that, so jp rails_object will work.
# - if it's a string, tries to JSON parse it first. So jp '{"pants": 42}' will work, and so will jp object.to_json (even though as_json would be more efficient)
def jp(object)
  data = if object.respond_to? :as_json
           object.as_json
         else
           begin
             JSON.parse(object)
           rescue JSON::ParserError
             object
           end
         end

  # TODO: COLORIZE ME. Sadly we don't get that for free from pretty_generate.
  puts JSON.pretty_generate(data)
end
